generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  Id                         Int            @id @default(autoincrement())
  Description                String
  Address                    String
  City                       String
  Date                       DateTime
  Time                       String?
  Visit                      Visit
  ClientPhoneNumber          String
  ClientName                 String?
  MasterId                   Int
  AnnouncedPrice             String         @default("0")
  Status                     OrderStatus    @default(pending)
  Price                      String         @default("0")
  TelephoneRecord            String?
  Latitude                   Float?
  Longitude                  Float?
  Total                      Int            @default(0)
  Expenses                   Int            @default(0)
  Debt                       Int            @default(0)
  MasterName                 String?
  Comments                   String?
  Master                     User           @relation(fields: [MasterId], references: [Id])
  MessageId                  String?
  AllOrdersMessageId         String?
  ActiveOrderMessageId       String?
  DistributionOrderMessageId String?
  MasterSalary               Int            @default(0)
  CompanyShare               Int            @default(0)
  ClosingOrderId             Int?           @default(0)
  BotMessage                 String         @default("") @db.VarChar(500)
  IsWorking                  IsWorkingOrder @default(close)
  Type                       OrderType
}

model User {
  Id              Int        @id @default(autoincrement())
  UserName        String
  Password        String
  TelegramChatId  String
  MessageThreadId String
  TelegramId      String     @default("")
  Role            Role       @default(master)
  IsOnline        Boolean    @default(false)
  InterestRate    Int        @default(50) // Процентная ставка
  Status          UserStatus @default(atWork)
  Salary          Int        @default(0)
  Order           Order[]
  Region          String     @default("")
  Route           Route[]
}

model Coordinates {
  Id         Int     @id @default(autoincrement())
  Latitude   String // Широта
  Longitude  String // Долгота
  MapUrl     String?
  Route      Route?  @relation(fields: [RouteId], references: [Id])
  RouteId    Int?
  Widespread String? // Раскидано
}

model Route {
  Id            Int           @id @default(autoincrement())
  Coordinates   Coordinates[]
  City          String
  UserId        User          @relation(fields: [userId], references: [Id])
  userId        Int
  Stage         Int
  Status        RouteStatus
  DateTimeClose DateTime
}

enum RouteStatus {
  pending // Ожидает
  active // Активен
  atWork // В Работе
}

enum OrderStatus {
  pending // Ожидает
  fulfilled // Успешно
  rejectedByClient // Отказ клиента
  rejectedByMaster // Отказ мастера
  atWork // В работе
  active //активная заявка
  masterWentForSparePart // Мастер отъехал за зч
  awaitingPayment // ожидает оплаты
  takeToSD //забрал на сд
  debt //Долг
  distribution // На распределении
  transfer // Перенос
}

enum IsWorkingOrder {
  isWorking
  close
}

enum OrderType {
  specialized
  notSpecialized
  airConditioner
}

enum UserStatus {
  atWork // Работает
  waitForWork // Ждет заказ
  wentForSparePart // Уехал за ЗЧ
  dayOff // Выходной
}

enum Visit {
  primary // Первичный
  repeated // Повторный
  guarantee //Гарантия
}

enum Role {
  master
  admin
  disp
  regional
  promouter
}
