generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  Id                         Int            @id @default(autoincrement())
  Description                String
  Address                    String
  City                       String
  Date                       DateTime
  Time                       String?
  Visit                      Visit
  ClientPhoneNumber          String
  ClientName                 String?
  MasterId                   Int
  AnnouncedPrice             String         @default("0")
  Status                     OrderStatus    @default(pending)
  Price                      String         @default("0")
  TelephoneRecord            String?
  Latitude                   Float?
  Longitude                  Float?
  Total                      Int            @default(0)
  Expenses                   Int            @default(0)
  Debt                       Int            @default(0)
  MasterName                 String?
  Comments                   String?
  Master                     User           @relation("Order", fields: [MasterId], references: [Id])
  Referral                   User?          @relation("OrderRef", fields: [ReferralId], references: [Id])
  Disp                       User?          @relation("OrderCreater", fields: [DispId], references: [Id])
  OrderCloser                User?          @relation("OrderCloser", fields: [OrderCloserId], references: [Id])
  ReasonImage                Image?         @relation("ReasonImage", fields: [ReasonImageId], references: [Id])
  ReasonImageId              Int?
  OrderCloserId              Int?
  DispId                     Int?
  ReferralId                 Int?
  MessageId                  String?
  AllOrdersMessageId         String?
  ActiveOrderMessageId       String?
  DistributionOrderMessageId String?
  MasterSalary               Int            @default(0)
  CompanyShare               Int            @default(0)
  ClosingOrderId             Int?           @default(0)
  BotMessage                 String         @default("") @db.VarChar(500)
  IsWorking                  IsWorkingOrder @default(close)
  Type                       OrderType
}

model User {
  Id               Int             @id @default(autoincrement())
  UserName         String
  Password         String
  TelegramChatId   String
  MessageThreadId  String
  TelegramId       String          @default("")
  Role             Role            @default(master)
  IsOnline         Boolean         @default(false)
  InterestRate     Int             @default(50) // Процентная ставка
  Status           UserStatus      @default(atWork)
  Salary           Int             @default(0)
  Order            Order[]         @relation("Order")
  OrderRef         Order[]         @relation("OrderRef")
  OrderCreater     Order[]         @relation("OrderCreater")
  OrderCloser      Order[]         @relation("OrderCloser")
  Region           String          @default("")
  Route            Route[]
  Avatar           Image?          @relation(fields: [AvatarId], references: [Id])
  AvatarId         Int?
  Company          Company?        @relation("Workers", fields: [CompanyId], references: [Id])
  CompanyId        Int?
  CompanyOwner     Company[]       @relation("Owner")
  PercentageGrid   PercentageGrid? @relation("Grid", fields: [PercentageGridId], references: [Id])
  PercentageGridId Int?
  CompanyInterest  Int?            @default(0)
}

model Coordinates {
  Id            Int     @id @default(autoincrement())
  Latitude      String  @default("0") // Широта
  Longitude     String  @default("0") // Долгота
  MapUrl        String?
  Route         Route?  @relation(fields: [RouteId], references: [Id])
  RouteId       Int?
  Widespread    String? @default("0") // Раскидано @
  Comments      String? @default("")
  CoordinateUrl String? @default("")
}

model Route {
  Id            Int           @id @default(autoincrement())
  Coordinates   Coordinates[]
  City          String
  UserId        User          @relation(fields: [userId], references: [Id])
  userId        Int
  Stage         Int
  Status        RouteStatus
  DateTimeClose DateTime
}

model Image {
  Id          Int     @id @default(autoincrement())
  FileName    String
  Data        Bytes   @db.ByteA
  User        User[]
  ReasonImage Order[] @relation("ReasonImage")
}

model Company {
  Id                     Int     @id @default(autoincrement())
  CompanyName            String
  TotalCompanyMoney      Int
  PastTotalCompanyMoney  Int
  SalaryToSend           Int
  CompanyWorkers         User[]  @relation("Workers")
  Primary                Boolean @default(false)
  PrimaryCompanyId       Int?
  CompanyOwner           User?   @relation("Owner", references: [Id], fields: [CompanyOwnerId])
  CompanyOwnerId         Int?
  PrimaryCompanyInterest Int?    @default(0)
}

model PercentageGridItem {
  Id               Int             @id @default(autoincrement())
  From             String
  To               String
  CheckAmount      String?
  PercentageGrid   PercentageGrid? @relation("Item", fields: [PercentageGridId], references: [Id])
  PercentageGridId Int?
}

model PercentageGrid {
  Id    Int                  @id @default(autoincrement())
  Name  String
  Items PercentageGridItem[] @relation("Item")
  User  User[]               @relation("Grid")
}

model Log {
  Id Int @id @default(autoincrement())
}

enum RouteStatus {
  pending // Ожидает
  active // Активен
  atWork // В Работе
}

enum OrderStatus {
  pending // Ожидает
  fulfilled // Закрыта
  rejectedByClient // Отказ клиента
  rejectedByMaster // Отказ мастера
  atWork // В работе
  active //активная заявка
  masterWentForSparePart // Мастер отъехал за зч
  awaitingPayment // ожидает оплаты
  takeToSD //забрал на сд
  debt //Долг
  distribution // На распределении
  transfer // Перенос
  missedCall // Недозвон
}

enum IsWorkingOrder {
  isWorking
  close
}

enum OrderType {
  specialized
  notSpecialized
  airConditioner
  fridge
  washingMachine
}

enum UserStatus {
  atWork // Работает
  waitForWork // Ждет заказ
  wentForSparePart // Уехал за ЗЧ
  dayOff // Выходной
}

enum Visit {
  primary // Первичный
  repeated // Повторный
  guarantee //Гарантия
}

enum Role {
  master
  admin
  disp
  regional
  promouter
  dir
  fired //уволен
  all
  owner
}
